= FnordMetric

yet another report *generator*

== Usage

you need a mongodb instance and have to configure the mongoid-gem if your app doesn't already do that:

  require 'fnordmetric' 
  Mongoid.configure{ |c| c.master = Mongo::Connection.new.db("fnordmetric_test") }


that's all. you can start tracking data:
  
  FnordMetric.track('car_seen', :color => "red",  :speed => 130, :passengers => 2)
  FnordMetric.track('car_seen', :color => "pink", :speed => 150, :passengers => 1)
  FnordMetric.track('car_seen', :color => "red",  :speed => 65,  :passengers => 4, :time => 50.hours.ago)
  FnordMetric.track('car_seen', :color => "blue", :speed => 100, :passengers => 2, :time => 30.hours.ago)
  FnordMetric.track('car_seen', :color => "red",  :speed => 123, :passengers => 2)
  FnordMetric.track('car_seen', :color => "blue", :speed => 130, :passengers => 3)
  FnordMetric.track('car_seen', :color => "red",  :speed => 142, :passengers => 2)


to see some shiny stats you first have to define your metrics. e.g. in 'config/initializers/fnordmetric.rb':

  FnordMetric.metric(:colors_total,     :types => [:car_seen], :count => true, :unique => :color) 
  FnordMetric.metric(:cars_total,       :types => [:car_seen], :count => true) 
  FnordMetric.metric(:passengers_total, :types => [:car_seen], :sum => :passengers) 
  FnordMetric.metric(:average_speed,    :types => [:car_seen], :average => :speed) 



use combine-metrics to build your own 'indices':

  FnordMetric.metric(:passengers_red_car, :sum => :passengers, :filter => { :colors => :red }, :types => [:car_seen]) 
  FnordMetric.metric(:passengers_blue_car, :sum => :passengers, :filter => { :colors => :blue }, :types => [:car_seen]) 

  FnordMetric.metric(:blue_to_red_ratio, :combine => lambda{ |x|
    x.passengers_blue_car / x.passengers_red_car
  })


generate the report in your controller or model:

  report = FnordMetric.report(:range => (3.days.ago..Time.now))
  report.colors_total.current      # => 3  
  report.colors_total.current      # => 3
  report.cars_total.current        # => 7
  report.average_speed.current     # => 113.6
  report.passengers_total.current  # => 26
  report.colors_total.current      # => 3

  report.colors_total.at(40.hours.ago)   # => 1
  report.colors_total.at(20.hours.ago)   # => 2

  report.colors_total.values  
    => { <Date 03-10-11> => 1, <Date 04-10-11> => 2, <Date 05-10-11> => 3 }

  report.colors_total.ticks
    => [ (<Date 03-10-11 00:00:00>..<Date 03-10-11 23:59:59>), (<Date 04-10...
   

fnordmetric comes with javascript charting helper and a javascript dashboard app. to 
use them you have to load a middleware by adding this line to your environment.rb:

  config.middleware "FnordMetric::Dispatch"


now you can start rendering widgets in your own views:

  widget = FnordMetric.widget(
    :passengers_red_blue_widget,
    :title => "Passengers (red/blue)",
    :type => :graph,
    :metrics => [:passengers_blue_car, :passengers_red_car],
    :range => (14.days.ago..Time.now)
  )

  widget.render
    => "<script type="text/javascript" src="/fnordmetric/widget.js?type=..."


point your browser to 'myapp.com/fnordmetric' and you should see an empty dashboard. you can 
add dashbaords and widgets like this (e.g. in initializers/fnordmetric.rb):

  FnordMetric.widget(
    :cars_avg_speed, 
    :type => :graph, 
    :metrics => :average_speed, 
    :title => "Speed (avg)"
  )

  FnordMetric.widget(
    :cars_unique_colors, 
    :type => :graph, 
    :metrics => :colors_total, 
    :title => "Number of different colors"
  )

  FnordMetric.dashboard 'Cars' do |dash|    
    dash.add_widget :cars_avg_speed
    dash.add_widget :cars_unique_colors
  end


or like this:

  FnordMetric.dashboard 'Passengers' do |dash|  

    dash.add_widget FnordMetric.widget(:passenger_blue_red_graph, 
      :metrics => [:passengers_blue_car, :passengers_red_car], 
      :title => "Passengers (red/blue)", 
      :type => :graph
    )
    
    dash.add_widget FnordMetric.widget(:passengers_total_graph, 
      :metrics => :passengers_total,
      :title => "Passenger blue/red Ratio", 
      :type => :graph
    )

  end


== Standalone service

you can also run the fnordmetric webapp as a standalone service. Your 'fnordmetric_server.rb' would look like this:

  require "rubygems"
  require "fnordmetric"
  require "thin"

  FnordMetric.metric(:passengers_total, :sum => :passengers, :types => [:car_seen])
  FnordMetric.metric(:passengers_red_car, :sum => :passengers, :filter => { :colors => :red }, :types => [:car_seen]) 
  FnordMetric.metric(:passengers_blue_car, :sum => :passengers, :filter => { :colors => :blue }, :types => [:car_seen]) 

  FnordMetric.metric(:blue_to_red_ratio, :combine => lambda{ |x|
    x.passengers_blue_car / x.passengers_red_car
  })

  FnordMetric.dashboard 'Passengers' do |passengers| 
     
    passengers.add_widget FnordMetric.widget(:passenger_br_ratio_graph, 
      :metrics => :blue_to_red_ratio, 
      :title => "Passenger blue/red Ratio", 
      :type => :graph
    )

    passengers.add_widget FnordMetric.widget(:passenger_blue_red_graph, 
      :metrics => [:passengers_blue_car, :passengers_red_car], 
      :title => "Passengers (red/blue)", 
      :type => :graph
    )
    
    passengers.add_widget FnordMetric.widget(:passengers_total_graph, 
      :metrics => :passengers_total,
      :title => "Passenger blue/red Ratio", 
      :type => :graph
    )

  end

  Mongoid.configure do |c| 
    c.master = Mongo::Connection.new.db("myfnordmetric") 
  end

  app = FnordMetric::App.new
  Thin::Server.start('127.0.0.1', 2323, app)

 
when run as a standalone service events can be added via a very simple (restful) http post:

  POST http://myapp:port/fnordmetric/events type=car_seen&color=red&passengers=2&speed=120

with curl:

  curl -X POST -d "type=car_seen&color=red&passengers=2&speed=120" http://myapp:port/fnordmetric/events


== Option Reference

*FnordMetric.metric* (FnordMetric::Metric.new) 

===== :count => true
====== return the total number of events (one of count, average, sum or combine is mandatory)
====== ~

===== :average => (field)  
====== return the avg of all "field"-values (one of count, average, sum or combine is mandatory)
====== ~

===== :sum => (field)      
====== return the sum of all "field"-values (one of count, average, sum or combine is mandatory)
====== ~

===== :combine => (lambda) 
====== custom accumulator (one of count, average, sum or combine is mandatory)
====== ~

===== :unique   => (field)    
====== only consider events with unique (field)
====== ~

===== :types    => (types)    
====== only consider events where type in types
====== ~

===== :filter   => (hash)     
====== only consider events with fields matching (hash)
====== ~

===== :select   => (lambda)   
====== only consider events for which (lambda) is true


*FnordMetric.widget* (FnordMetric::Widget.new)

===== :metrics  => (fnord)       
====== foobar (mandatory)
====== ~

===== :title    => (fnord)       
====== foobar (mandatory)
====== ~

===== :tick     => (fnord)       
====== foobar
====== ~

===== :range    => (fnord)       
====== foobar
====== ~

===== :current  => (fnord)       
====== FIXME: opt is actually named :include_curent
====== ~

===== :report   => (fnord)       
====== foobar
====== ~

*GraphWidget* (FnordMetric::GraphWidget.new)

===== :delta   => (fnord)       
====== foobar
====== ~

===== :chart   => (fnord)       
====== foobar
====== ~




== TODO

* auth?!



== Copyright

Copyright (c) 2011 Paul Asmuth

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


